// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Logs in to your Edupage account using the provided credentials.",
                "consumes": [
                    "application/json",
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login to your Edupage account",
                "parameters": [
                    {
                        "description": "Login using username and password",
                        "name": "login",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/main.LoginRequestUsernamePassword"
                        }
                    },
                    {
                        "description": "Login using username, password and server",
                        "name": "loginServer",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/main.LoginRequestUsernamePasswordServer"
                        }
                    },
                    {
                        "description": "Login using token",
                        "name": "loginToken",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/main.LoginRequestToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.LoginSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.LoginBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.LoginUnauthorizedResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.LoginBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Username and Password are required"
                }
            }
        },
        "main.LoginRequestToken": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "main.LoginRequestUsernamePassword": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "main.LoginRequestUsernamePasswordServer": {
            "type": "object",
            "required": [
                "password",
                "server",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "main.LoginSuccessResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "temp_token": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "main.LoginUnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid username or password"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "EduPage2 API",
	Description:      "This is the backend for the EduPage2 app.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
